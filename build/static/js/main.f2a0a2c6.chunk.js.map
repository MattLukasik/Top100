{"version":3,"sources":["components/Header.js","components/AlbumItem.js","components/AlbumList.js","components/Footer.js","components/Search.js","App.js","index.js"],"names":["Header","className","Component","AlbumItem","props","albumItem","src","label","rights","AlbumList","albumData","map","album","key","id","attributes","Footer","Search","handleChange","e","setState","target","value","state","api","fetch","this","then","resp","ok","json","Error","data","displayAlbums","feed","entry","catch","err","console","log","onSubmit","getAlbum","type","name","placeholder","onChange","App","albumList","ReactDOM","render","document","getElementById"],"mappings":"0UAeeA,G,uLARP,OACI,yBAAKC,UAAU,sDACX,wBAAIA,UAAU,cAAd,yC,GALKC,c,MCoBNC,MArBf,SAAmBC,GAAO,IAGfC,EAAaD,EAAbC,UAKP,OACI,yBAAKJ,UAAU,iBACX,yBAAKK,IAAKD,EAAU,YAAY,GAAGE,MAAON,UAAU,iCACpD,yBAAKA,UAAU,sBACX,wBAAIA,UAAU,mBAAd,IAAkCI,EAAU,WAAWE,MAAvD,KACA,wBAAIN,UAAU,qBAAqBI,EAAU,aAAaE,OAC1D,0BAAMN,UAAU,oBAAoBI,EAAUG,OAAOD,OACrD,4BAAQN,UAAU,OAAlB,QAA8BI,EAAU,YAAYE,UCIrDE,MAnBf,SAAmBL,GAAO,IAGfM,EAAaN,EAAbM,UAKP,OACI,yBAAKT,UAAU,0BACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACVS,EAAUC,KAAI,SAAAC,GAAK,OAAI,kBAAC,EAAD,CAAWP,UAAWO,EAAOC,IAAKD,EAAME,GAAGC,WAAW,kBCAnFC,G,uLARP,OACI,yBAAKf,UAAU,oBACP,uBAAGA,UAAU,cAAb,2B,GALCC,c,OC4ENe,G,kBA3EX,WAAYb,GAAQ,IAAD,8BACf,4CAAMA,KAyBVc,aAAe,SAAAC,GACX,EAAKC,SAAL,eACKD,EAAEE,OAAOP,GAAKK,EAAEE,OAAOC,SA1B5B,EAAKC,MAAQ,CACTC,IAAK,2DACLZ,MAAO,IAJI,E,iFASE,IAAD,OAEhBa,MAAM,GAAD,OAAIC,KAAKH,MAAMC,MAAOG,MAAK,SAAAC,GAC5B,GAAIA,EAAKC,GACL,OAAOD,EAAKE,OAEZ,MAAM,IAAIC,MAAM,yBAErBJ,MAAK,SAAAK,GACJ,EAAK5B,MAAM6B,cAAcD,EAAKE,KAAKC,UAGpCC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,Q,+BAqCV,IACCzB,EAASc,KAAKH,MAAdX,MAEP,OACI,yBAAKX,UAAU,oBACX,0BAAMA,UAAU,cAAcuC,SAAUd,KAAKe,UACzC,2BAAOC,KAAK,SAASC,KAAK,QAAQ7B,GAAG,QAAQQ,MAAOV,EAAOX,UAAU,eAC9D2C,YAAY,4BAA4BC,SAAUnB,KAAKR,eAC9D,4BAAQjB,UAAU,MAAMyC,KAAK,UAA7B,gB,GApECxC,cCiCN4C,E,YA7BX,WAAY1C,GAAQ,IAAD,8BACf,4CAAMA,KAQV6B,cAAgB,SAAAc,GACZ,EAAK3B,SAAS,CACV2B,eATJ,EAAKxB,MAAQ,CACTC,IAAK,2DACLuB,UAAU,IAJC,E,sEAkBf,OACI,oCACI,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQrC,UAAWgB,KAAKH,MAAMwB,UAAWd,cAAeP,KAAKO,gBAC7D,kBAAC,EAAD,CAAWvB,UAAWgB,KAAKH,MAAMwB,UAAWvB,IAAKE,KAAKH,MAAMC,MAC5D,kBAAC,EAAD,W,GAxBEtB,aCDlB8C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.f2a0a2c6.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Header.scss';\n\n\nclass Header extends Component {\n\n    render() {\n        return (\n            <div className=\"jumbotron-fluid container-fluid text-center header\">\n                <h1 className=\"headerText\">This is iTunes's 100 Best Albums</h1>\n            </div>\n        )\n    }\n}\n\nexport default Header;","import React from 'react';\nimport './AlbumItem.scss'\n\nfunction AlbumItem(props) {\n\n    //dekonstuuję przekazany w propsie albumItem\n    const {albumItem} = props;\n\n    //wyciągam z obiektu albumItem interesujące mnie dane i\n    // wypełniam poszczególne kolumny zaplanowanego wcześniej grida, po 4 w rzędzie,\n\n    return (\n        <div className=\"col-sm-3 mb-4\">\n            <img src={albumItem[\"im:image\"][2].label} className=\"mx-auto d-block card-img-top\"/>\n            <div className=\"card-body bg-light\">\n                <h1 className=\"card-title name\">\"{albumItem[\"im:name\"].label}\"</h1>\n                <h2 className=\"card-title artist\">{albumItem[\"im:artist\"].label}</h2>\n                <span className=\"card-text rights\">{albumItem.rights.label}</span>\n                <button className=\"buy\">Buy: {albumItem[\"im:price\"].label}</button>\n            </div>\n        </div>\n    )\n}\n\nexport default AlbumItem;","import React from 'react';\nimport AlbumItem from './AlbumItem';\n\nfunction AlbumList(props) {\n\n    //dekonstuuję przekazany w propsie albumData\n    const {albumData} = props;\n\n    //tworzę wstępny zarys grida, za pomocą mapy wyciągam z \"albumData\" informacje o poszczególnych albumach\n    //i za pomocą propsów przekazuję je do komponentu AlbumItem\n\n    return (\n        <div className=\"py-5 my-5 bg-secondary\">\n            <div className=\"container\">\n                <div className=\"row\">\n                    {albumData.map(album => <AlbumItem albumItem={album} key={album.id.attributes['im:id']}/>)}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default AlbumList;","import React, {Component} from 'react';\nimport './Footer.scss'\n\n\nclass Footer extends Component {\n\n    render() {\n        return (\n            <div className=\"container footer\">\n                    <p className=\"footerText\">© Bring-On 2019</p>\n            </div>\n        )\n    }\n}\n\nexport default Footer;","import React, {Component} from \"react\";\n\nimport './Search.scss'\n\nclass Search extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            api: \"https://itunes.apple.com/us/rss/topalbums/limit=100/json\",\n            album: \"\",\n        };\n    }\n\n    //pobieram dane na temat albumów\n    componentDidMount() {\n\n        fetch(`${this.state.api}`).then(resp => {\n            if (resp.ok) {\n                return resp.json();\n            } else {\n                throw new Error(\"Connection problem\");\n            }\n        }).then(data => {\n            this.props.displayAlbums(data.feed.entry);\n            // console.log(data.feed.entry);\n\n        }).catch(err => {\n            console.log(err);\n        });\n    }\n\n    handleChange = e => {\n        this.setState({\n            [e.target.id]: e.target.value\n        });\n    };\n\n    // po kliknięciu w \"Search\" pobieram dane na temat WYBRANYCH albumów\n    //wyszukiwanie jeszcze nie działa, muszę nad tym popracować\n\n    // getAlbum = e => {\n    //     e.preventDefault();\n    //\n    //     const {album} = this.state;\n    //\n    //     fetch(this.state.api).then(resp => {\n    //         if (resp.ok) {\n    //             return resp.json();\n    //         } else {\n    //             throw new Error(\"Connection problem\");\n    //         }\n    //     }).then(data => {\n    //         if (data.feed.entry[\"im:artist\"].label !== album)\n    //             throw new Error(\"Sorry, we can't find your Artist!\");\n    //\n    //         if(data.feed.entry[\"im:artist\"].label === album)\n    //         this.props.displayAlbums(data.feed.entry);\n    //\n    //     }).catch(err => {\n    //         console.log(err)\n    //     });\n    // };\n\n\n    render() {\n        const {album} = this.state;\n\n        return (\n            <div className=\"search_container\">\n                <form className=\"search_form\" onSubmit={this.getAlbum}>\n                    <input type=\"search\" name=\"album\" id=\"album\" value={album} className=\"search_field\"\n                           placeholder=\"Search for your Artist...\" onChange={this.handleChange}/>\n                    <button className=\"btn\" type=\"submit\">Search</button>\n                </form>\n            </div>\n        )\n    }\n}\n\n\nexport default Search;","import React, {Component} from 'react';\nimport Header from './components/Header';\nimport AlbumList from './components/AlbumList';\nimport Footer from './components/Footer';\nimport Search from './components/Search';\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            api: \"https://itunes.apple.com/us/rss/topalbums/limit=100/json\",\n            albumList:[]\n        };\n    }\n\n    // metoda, która aktualizuje stan albumList (tablica albumów wyszukanych w komponencie Search)\n    displayAlbums = albumList => {\n        this.setState({\n            albumList\n        })\n    };\n\n    //Tablicę wyszukanych albumów przekazuję w propsie do komponentu AlbumList\n    render() {\n\n        return (\n            <>\n                <Header/>\n                <Search albumData={this.state.albumList} displayAlbums={this.displayAlbums}/>\n                <AlbumList albumData={this.state.albumList} api={this.state.api}/>\n                <Footer/>\n            </>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}